# Project TODO: Terraform Provisioning for Strata Cloud Manager (SCM) - Initial Scope

Based on PRD.md: Terraform Provisioning for Strata Cloud Manager (SCM), with a focus on Address Objects, Address Groups, External Dynamic Lists, and Security Rules for the initial phase.

## 1. Foundational Setup & Decisions

*   [ ] Create dedicated Git repository for SCM Terraform code. (PRD 2.1)
*   [ ] Define and implement standard repository structure (e.g., `modules/`, `environments/`, `examples/`). (PRD 2.1, 7)
*   [ ] **Decision:** Decide on the preferred secure authentication method for the `scm` provider (e.g., environment variables, secrets manager). (PRD 8)
*   [ ] Implement secure authentication method for the `scm` provider configuration. (PRD 2.1, 5.6, 6.3)
*   [ ] **Decision:** Decide on the remote backend to be used for Terraform state (e.g., S3, GCS, Azure Blob Storage, Terraform Cloud). (PRD 8)
*   [ ] Set up the chosen remote state backend configuration. (PRD 2.1, 5.7, 7)
*   [ ] **Decision:** Decide on the strategy for managing multiple SCM tenants/environments (e.g., separate state files per environment, Terraform workspaces). (PRD 8)
*   [ ] Define initial variable structure for environment-specific values. (PRD 5.5, 7)
*   [ ] **Decision:** Define the required level of testing for code changes (e.g., local validate, integration tests against dev tenant). (PRD 8, 6.5)
*   [ ] **Decision:** Establish naming conventions for resources, modules, and variables. (PRD 8)

## 2. Core Resource Implementation (MVP Focus)

*   [ ] Develop reusable Terraform module for `scm_address_object`. (PRD 2.1, 5.4, 7)
    *   [ ] Define necessary input variables. (PRD 5.5)
    *   [ ] Define output variables. (PRD 5.8)
    *   [ ] Ensure module supports create, update, and delete operations. (PRD 5.1, 5.2, 5.3)
*   [ ] Develop reusable Terraform module for `scm_address_group`. (PRD 2.1, 5.4, 7)
    *   [ ] Define necessary input variables (including references to address objects/other groups). (PRD 5.5)
    *   [ ] Define output variables. (PRD 5.8)
    *   [ ] Ensure module supports create, update, and delete operations.
*   [ ] Develop reusable Terraform module for `scm_external_dynamic_list`. (Based on User Note, analogous to PRD 2.1 scope)
    *   [ ] Define necessary input variables.
    *   [ ] Define output variables.
    *   [ ] Ensure module supports create, update, and delete operations.
*   [ ] Develop reusable Terraform module for `scm_security_rule`. (PRD 2.1, 5.4, 7)
    *   [ ] Define necessary input variables (including references to network objects, service objects, profiles, etc.). (PRD 5.5)
    *   [ ] Define output variables. (PRD 5.8)
    *   [ ] Ensure module supports create, update, and delete operations.

## 3. Usage Examples & Basic Workflow

*   [ ] Create basic examples in the `examples/` directory demonstrating usage of the core modules (address, group, EDL, security rule). (PRD 2.1, 5.9)
    *   [ ] Example: Creating simple address objects and a group.
    *   [ ] Example: Creating an EDL.
    *   [ ] Example: Creating a basic security rule referencing objects/groups/EDL.
*   [ ] Create an example environment configuration in `environments/` demonstrating how to wire modules together for a simple deployment. (PRD 2.1)
*   [ ] Integrate/Document standard workflow steps: `terraform init`, `validate`, `fmt`, `plan`, `apply`. (PRD 5.1, 5.10, 7)

## 4. Documentation

*   [ ] Write/Update READMEs for each developed module explaining inputs, outputs, and usage. (PRD 2.1, 6.2)
*   [ ] Write a high-level README for the repository explaining the project setup, structure, prerequisites, and how to deploy configurations. (PRD 2.1, 6.2)
*   [ ] Document how to securely handle credentials/variables outside of the code repository. (PRD 6.3)

## 5. Refinement & Testing

*   [ ] Ensure the code adheres to established naming conventions.
*   [ ] Ensure code is formatted using `terraform fmt`. (PRD 5.10)
*   [ ] Ensure code passes `terraform validate`. (PRD 5.10)
*   [ ] Perform manual testing against a development SCM tenant to verify resource creation, update, and deletion for the core types. (PRD 2.2, 6.5)
*   [ ] Code review for implemented modules and configurations. (PRD 10)

## 6. Future Considerations (Out of Scope for MVP, but noted)

*   [ ] Integrate into CI/CD pipelines for automated workflows. (PRD 9)
*   [ ] Expand scope to include other SCM resource types listed in PRD 2.1. (PRD 9)
*   [ ] Implement automated testing beyond basic validation. (PRD 9)
*   [ ] Develop tooling or scripts for state migration/management. (PRD 9)
*   [ ] Implement drift detection mechanisms. (PRD 9)

---

**Note:** Items marked "[ ] **Decision**" need to be discussed and agreed upon by the team before or early in the implementation phase.